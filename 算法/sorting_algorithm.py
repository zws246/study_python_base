"""
sorting_algorithm(排序算法）
是一种能将一串数据依照特定顺序进行排列的一种算法
"""
"""
冒泡排序（bubble sort)
冒泡排序（英语：Bubble Sort）是一种简单的排序算法。它重复地遍历要排序的数列，
一次比较两个元素，如果他们的顺序错误就把他们交换过来。遍历数列的工作是重复地进行
直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元
素会经由交换慢慢“浮”到数列的顶端。
比较相邻的元素。如果第一个比第二个大（升序），就交换他们两个。
对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后
的元素会是最大的数。
针对所有的元素重复以上的步骤，除了最后一个。
持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。
"""
items = [2, 5, 22, 44, 66, 32, 53, 76, 88]


def bubble_sort(items):
    """
    外层决定循环的次数
    第一次 2-5 2-22 22-44 44-66 66-32 66-53 66-76 76-88 共8次[2, 5, 22, 44, 32, 53,66, 76, 88]
    第二次 2-5 2-22 22-44 44-32 44-53 53-66 66-76 76-88 共7次 .....
    """
    n = len(items)
    for n in range(n - 1, 0, -1):  # 外层决定次数
        for i in range(n):  # 内存两两进行比较
            if items[i] < items[i + 1]:  # 如果前面的数小于后面的数相互交换
                items[i], items[i + 1] = items[i + 1], items[i]
    return items


"""
选择排序（selection sort)
选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未
排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素
中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序
完毕。
选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会
被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对
n 个元素的表进行排序总共进行至多 n-1 次交换。在所有的完全依靠交换去移动元素的排序
方法中，选择排序属于非常好的一种。
"""


def selection_sort(items):
    """
    [2, 5, 22, 44, 66, 32, 53, 76, 88]
    外层决定循环的次数
    第一次 假定开始位置的元素i[2]是最大的元素 [2]-[5] 继续假定5的位置是最大的元素 ....
    最终88的位置是最大的元素，然后用假定的初始位置和确定的最大元素位置比较，不一致就交换，初始位置就放置最大的元素
    第二次 假定第二个位置是最大的元素....
    :param items:
    :return:
    """
    n = len(items)
    for i in range(n - 1):
        max_num = i
        for j in range(i + 1, n):
            if items[j] > items[max_num]:
                max_num = j
        if i != max_num:
            items[i], items[max_num] = items[max_num], items[i]
    return items


"""
插入排序(insertion sort)
插入排序（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构
建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入
排序在实现上，在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素
提供插入空间。
"""


def insertion_sort(items):  # 感觉和冒泡排序的方式刚好相反
    """
    [2, 5, 22, 44, 66, 32, 53, 76, 88]
    第一次  【2，5】 5-2
    第二次  【2，5，22】 22-5
    第三次  【2，5，22，44】 44-22
    第四次  【2，5，22，44，66】 66-44
    第五次  【2，5，22，44，66，32】 32-66 32-44 32-22
    第六次  【2，5，22，32，44，66，53】53-66 53-44
    第7次   【2，5，22，32，44，53，66，76】76-66
    第8次   【2，5，22，32，44，53，66，76，88】88-76
    :param items:
    :return:
    """
    n = len(items)
    for i in range(1, n):
        while i > 0:
            if items[i] < items[i - 1]:
                items[i], items[i - 1] = items[i - 1], items[i]
            else:
                break
            i -= 1
    return items


if __name__ == '__main__':
    # items = bubble_sort(items)
    # items = selection_sort(items)
    items = insertion_sort(items)
    print(items)
